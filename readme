# PDF Q&A Application

## Overview

This project is a PDF Question & Answering system that enables users to upload large PDF documents (e.g., books, reports) and ask questions about their content. It uses a Python FastAPI backend to process PDFs, build an indexed vector store embedding chunks of document text, and an OpenAI-based retrieval-augmented generation (RAG) model to answer questions. The frontend is a React chat-style interface for interacting with the system.

---

## Features

- Upload multi-page PDF documents (tested with 180+ pages)
- Automatic text extraction and chunking for indexing
- Vector embeddings created using OpenAI Embedding API (latest SDK usage)
- Question answering using a chat-based OpenAI model (GPT-3.5-turbo or newer)
- React frontend with chatbot interface supporting PDF upload and Q&A
- CORS-enabled FastAPI backend for seamless frontend-backend communication

---

## Tech Stack

- **Backend:** Python 3.10+, FastAPI, Uvicorn, OpenAI Python SDK v1.x
- **Frontend:** React 18, Functional Components, Fetch API for REST calls
- **APIs:** OpenAI Embeddings and Chat Completion endpoints
- **Other Libraries:** Pydantic, Starlette CORS middleware

---

## Setup Instructions

### Prerequisites

- Python 3.9 or newer
- Node.js and npm
- OpenAI API key with appropriate permissions
- Internet connection for API calls

### Backend Setup

1. Clone the repo and navigate to backend directory:

cd backend

text

2. Install required Python packages:

pip install -r requirements.txt

text

3. Configure `myconfig.py` with your OpenAI API key:

OPENAI_API_KEY = "your_openai_api_key_here"

text

4. Run the FastAPI backend server on port 8080:

uvicorn app:app --reload --port 8080

text

---

### Frontend Setup

1. Navigate to the frontend directory:

cd frontend

text

2. Install dependencies:

npm install

text

3. Start the React development server:

npm start

text

4. Open [http://localhost:3000](http://localhost:3000) in your browser.

---

## Usage

1. In the React frontend, upload a PDF document (e.g., multi-page book).
2. Wait for the upload and indexing process to complete (a success message will appear).
3. Type questions related to the uploaded PDF in the chat box.
4. Receive answers generated by the AI model based on document contents.
5. Monitor backend logs for processing time and errors.

---

## Architecture Details

### Backend

- Receives PDF upload via `/upload-pdf/` POST endpoint.
- Extracts and splits PDF text into manageable chunks.
- Creates vector embeddings of chunks using `openai.embeddings.create`.
- Builds a vector store for efficient similarity search.
- Provides `/ask-question/` POST API to receive user queries and return AI-generated answers.
- Handles CORS to allow frontend requests from localhost:3000.

### Frontend

- React chatbot interface built with functional components and hooks.
- File input to upload PDFs and buttons to trigger uploads.
- Chat box supports user questions and displays bot answers.
- Fetch API calls to backend endpoints with proper content types.
- Auto-scrolls chat and provides UI feedback on upload status.

---

## Troubleshooting

- **CORS Errors:** Ensure backend CORS middleware is enabled with correct origin.
- **OpenAI API Errors:** Verify API key and usage limits on OpenAI dashboard.
- **500 Internal Server Errors:** Check backend console for tracebacks; common issues are with PDF parsing or embedding calls.
- **Slow processing:** Large documents may take minutes; improve by optimizing chunk sizes or caching.

---

## Future Improvements

- Add pagination or progress bar for indexing large PDFs.
- Support multiple simultaneous documents and user sessions.
- Enhance entity extraction and context-aware answering.
- Add authentication and user management.
- Deploy backend and frontend to production cloud.

---

## Contributing

Contributions and suggestions are welcome! Please fork the repo and submit pull requests or issues.

---

## License

Licensed under the MIT License.

---

## Contact

Project maintained by Smaksh Gupta.  
Email: smakshgupta55@gmail.com

---

Thank you for using the PDF Q&A Application!
